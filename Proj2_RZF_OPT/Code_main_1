using Convex
using ECOS
using MAT, JLD, HDF5
using MathProgBase

Wband = 10; # MHz
RadBS = 1000;

Km_ref = 32;
lamba = 1/0.388;
NumUser_ref = 100;
Noise_var = 10^(-174/10)*Wband*10^6*(10^0.9);
delta_k = Noise_var;

Km = Km_ref;
Pm = 10^(4.6);
p_an_bs = 189;
pc_bs = 10^4;

NoMonte = 1;

# "/Users/LONG NGUYEN/Documents/CVXPY/JULIA_OPT/Juno_JULIA/Proj2_RZF_OPT/"
Chan_file = matopen("/Users/LONG NGUYEN/Documents/CVXPY/JULIA_OPT/Juno_JULIA/Proj2_RZF_OPT/X_chan_data1.mat")
User_path = read(Chan_file, "User_ploss")
BSchan = read(Chan_file, "BSchan")
#close(Chan_file)

term_UE = 4;
prin = 0;
# while (prin < length(term_UE))
  prin = prin + 1;
  NumUser = term_UE[prin];

  # BS transmission
  h_rzf = [];
  BS_Chan_Full = BSchan[1:NumUser, 1:Km];
  h_rzf = BS_Chan_Full.';

  var_noise = zeros(1,NumUser);
  for i = 1:NumUser
    var_noise[i] = Noise_var/(User_path[i])^2;
  end

  H1, H2, H3 = svd(h_rzf*h_rzf');
  # H2 = Array{Any,1}(H2);

  bar_h = zeros(Km, NumUser) + im*zeros(Km, NumUser);
  for i = 1:NumUser
    bar_h[1:Km,i] = H1'*h_rzf[1:Km,i];
  end

  # QoS requirement
  rmin = 0.4*log(2);
  Pow_cir = Km*p_an_bs + pc_bs;

###################################################################
  # Initial point
eta_ini = NumUser/(10^(1.6));
pow = Variable(NumUser, Positive())
obj = 0;
for i = 1:NumUser
  obj =  obj + abs( h_rzf[:,i]'*inv(h_rzf*h_rzf' + eta_ini*eye(Km))^2*h_rzf[:,i] )*pow[i];
end
prob_ini = minimize(obj)
for i = 1:NumUser
  term_1 = 0;
  for j = 1:NumUser
    if (j != i)
      term_1 = term_1 + abs( h_rzf[:,i]'*inv(h_rzf*h_rzf' + eta_ini*eye(Km))*h_rzf[:,j] )^2*pow[j];
    end
  end
  term_1 = term_1 + var_noise[i];
  prob_ini.constraints += abs( h_rzf[:,i]'*inv(h_rzf*h_rzf' + eta_ini*eye(Km))*h_rzf[:,i] )^2*pow[i] >= (exp(rmin)-1)*term_1
end

#using GLPKMathProgInterface
@time solve!(prob_ini, ECOSSolver(verbose = false))

println("Status: ", prob_ini.status)
println("Objective value: ", prob_ini.optval)
#println("x = %x", x)
pow_sol = pow.value;

P_k0_ini = pow_sol;
sum_pow = 0;
for i = 1:NumUser
    sum_pow = sum_pow + abs( h_rzf[:,i]'*inv(h_rzf*h_rzf' + eye(Km)*eta_ini)^2*h_rzf[:,i] )*P_k0_ini[i];
end
t_ini = lamba*sum_pow + Pow_cir;

pow_check = minimum(P_k0_ini);
####################################################################
Rate_ini_ue = zeros(1, NumUser);
for i = 1:NumUser
    x_rate = abs( h_rzf[:,i]'*inv(h_rzf*h_rzf' + eye(Km)*eta_ini)*h_rzf[:,i] )^2*P_k0_ini[i];
    term_rate = 0;
    for j = 1:NumUser
        if(j != i)
            term_rate = term_rate + abs( h_rzf[:,i]'*inv(h_rzf*h_rzf' + eye(Km)*eta_ini)*h_rzf[:,j] )^2*P_k0_ini[j];
        end
    end
    term_rate = term_rate + var_noise[i];
    Rate_ini_ue[i] = log2(1 + x_rate/term_rate);
end



# ############################################################
# ########## EE_RZF_max algorithm ############################
OBJ_ref = zeros(10,1);
iter = 0; epsilon = 1;
while (epsilon >= 1e-2)
    iter = iter + 1;
    phi_n_ref = zeros(1, NumUser); z_m_ref = (zeros(1, Km));
    if (iter == 1)
       alp_ref = eta_ini;
       phi_n_ref = 1./P_k0_ini;
    else
       alp_ref = alp_sol;
       phi_n_ref = phi_n_sol;
    end

    term_y = zeros(1, NumUser); term_t = zeros(1, NumUser);
    a_2 = zeros(1, NumUser); b_2 = zeros(1, NumUser); c_2 = zeros(1, NumUser); d_2 = zeros(1, NumUser);
    for i = 1:NumUser
      term_y_ref = 0;
      for m = 1:Km
        term_y_ref = term_y_ref + abs(bar_h[m,i])^2/(alp_ref + abs(H2[m]));
      end
      term_y[i] = 1/term_y_ref^2;

      for j = 1:NumUser
        if (j != i)
          term_t_ref = 0;
          for m = 1:Km
            term_t_ref = term_t_ref + conj(bar_h[m,i])*bar_h[m,j]/(alp_ref + abs(H2[m]));
          end
          term_t[i] = term_t[i] + abs(term_t_ref)^2/phi_n_ref[j];
        end
      end
      term_t[i] = term_t[i] + var_noise[i];

      a_2[i] = log(1 + 1/(phi_n_ref[i]*term_y[i]*term_t[i])) + 3/(phi_n_ref[i]*term_y[i]*term_t[i] + 1);
      b_2[i] = 1/(phi_n_ref[i]*(phi_n_ref[i]*term_y[i]*term_t[i] + 1));
      c_2[i] = 1/(term_y[i]*(phi_n_ref[i]*term_y[i]*term_t[i] + 1));
      d_2[i] = 1/(term_t[i]*(phi_n_ref[i]*term_y[i]*term_t[i] + 1));
    end

    ###################################################################
      # optimization code
    phi_n = Variable(NumUser, Positive())
    z_m = Variable(Km, Positive())
    alp = Variable(1, Positive())

    obj1 = 0; obj2 = 0; obj3 = 0; obj4 = 0;

    obj1 = sum(a_2);
    for i = 1:NumUser
        obj2 = obj2 + b_2[i]*phi_n[i];
        term_obj3 = 0;
        for m = 1:Km
          term_obj3 = term_obj3 + abs(bar_h[m,i])^2 * (2*alp_ref + abs(H2[m]) - alp)/(alp_ref + abs(H2[m]))^2;
        end
        obj3 = obj3 + c_2[i]*square(invpos(term_obj3));
        term_obj4 = 0;
        for j = 1:NumUser
            if (j != i)
                term_obj4 = term_obj4 + quadoverlin( abs(trace((bar_h[:,j]*bar_h[:,i]')*diagm(z_m))), phi_n[j] );
            end
        end
        obj4 = obj4 + d_2[i]*(term_obj4 + var_noise[i]);
    end
    OBJ = real( obj1 - obj2 - obj3 - obj4 );

    prob = maximize(OBJ/log(2))
      ########## build up constraints #######################################
      # first and second constraints
      for m = 1:Km
        prob.constraints += z_m[m] >= invpos(alp + abs(H2[m]));
      end
      prob.constraints += 2*alp_ref + abs(H2[Km]) - alp >= 0;

      term_pow_con = 0;
      for i = 1:NumUser
        term_pow = 0;
        for m = 1:Km
          term_pow = term_pow + abs(bar_h[m,i])^2*quadoverlin(pos(z_m[m]), phi_n[i]);
        end
        term_pow_con = term_pow_con + term_pow;

        term_obj3 = 0;
        for m = 1:Km
          term_obj3 = term_obj3 + abs(bar_h[m,i])^2 * (2*alp_ref + abs(H2[m]) - alp)/(alp_ref + abs(H2[m]))^2;
        end
        term_obj4 = 0;
        for j = 1:NumUser
            if (j != i)
                term_obj4 = term_obj4 + quadoverlin( (abs(trace((bar_h[:,j]*bar_h[:,i]')*diagm(z_m)))), phi_n[j] );
            end
        end
        prob.constraints += a_2[i] >= rmin + b_2[i]*phi_n[i] + c_2[i]*square(invpos(term_obj3)) + d_2[i]*(term_obj4 + var_noise[i]);
      end
      prob.constraints += term_pow_con <= Pm;

    @time solve!(prob, ECOSSolver(verbose=false))

    # println("Status: ", prob.status)
    # println("Objective value: ", prob.optval)
    # println("x = %x", x)
    z_m_sol = z_m.value;
    phi_n_sol = phi_n.value;
    alp_sol = alp.value;

OBJ_ref[iter] = prob.optval;
if (iter >= 2)
  epsilon = abs(OBJ_ref[iter] - OBJ_ref[(iter-1)])/abs(OBJ_ref[(iter-1)]);
end
println("Optimal value: ", prob.optval)
println("Alpha value: ", alp_sol)
# println("Z value: ", z_m_sol)
println("Pow value: ", phi_n_sol)
println("Epsilon value: ", epsilon)

if (iter >= 10)
  epsilon = -1;
end

    ####################################################################
# ##################################################################
 end
